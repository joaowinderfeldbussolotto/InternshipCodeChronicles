service: vision
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  environment: 
    BUCKET_NAME: ${env:BUCKET_NAME}
    PRINCIPAL_ARN: ${env:PRINCIPAL_ARN}
  
  iam:
    role:
      name: role-for-computer-vision-app
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:GetObjectAttributes
          Resource:
            - arn:aws:s3:::${env:BUCKET_NAME}/*
        - Effect: Allow
          Action:
            - rekognition:DetectLabels
            - rekognition:DetectFaces
          Resource: "*"

resources:
  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BUCKET_NAME}
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
    
    MyBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: MyS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: 
                - s3:GetObject
                - s3:GetObjectAttributes
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: MyS3Bucket
                    - "/*"
            - Effect: Allow
              Principal:
                AWS: "${env:PRINCIPAL_ARN}"
              Action: 
                - s3:ListBucket
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: MyS3Bucket
              



functions:
  health:
    handler: routes/health.health
    events:
      - httpApi:
          path: /
          method: get
  v1Description:
    handler: routes/v1/v1_description.v1_description
    events:
      - httpApi:
          path: /v1
          method: get
  v1Vision:
    handler: routes/v1/v1_vision.post_v1_vision
    events:
      - httpApi:
          path: /v1/vision
          method: post
  v2Description:
    handler: routes/v2/v2_description.v2_description
    events:
      - httpApi:
          path: /v2
          method: get
  v2Vision:
    handler: routes/v2/v2_vision.post_v2_vision
    events:
      - httpApi:
          path: /v2/vision
          method: post
          
plugins:
  - serverless-offline
  - serverless-python-requirements
custom:
  serverless-offline:
    host: '127.0.0.1'