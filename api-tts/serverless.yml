service: api-tts
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9


resources:
  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false


    MyBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: MyS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: s3:GetObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: MyS3Bucket
                    - "/*"
            - Effect: Allow
              Principal:
                AWS: ${self:custom.principalArn}
              Action: s3:PutObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: MyS3Bucket
                    - "/*"

    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

custom:
  ${file(./env.yml)}

functions:
  health:
    handler: routes/health.health
    events:
      - httpApi:
          path: /
          method: get
  v1Description:
    handler: routes/v1.v1_description
    events:
      - httpApi:
          path: /v1
          method: get
  v2Description:
    handler: routes/v2.v2_description
    events:
      - httpApi:
          path: /v2
          method: get
  v1TTS: 
    handler: routes/v1.post_v1_tts
    events:
      - httpApi:
          path: /v1/tts
          method: post  
  v2TTS: 
    handler: routes/v2.post_v2_tts
    events:
      - httpApi:
          path: /v2/tts
          method: post  
  v3TTS: 
    handler: routes/v3.post_v3_tts
    events:
      - httpApi:
          path: /v3/tts
          method: post
      

plugins:
  - serverless-offline
  - serverless-python-requirements
